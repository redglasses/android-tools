#!/usr/bin/ruby

# Android has a huge and monolithic build system that does not allow to build
# components separately.
# This script tries to mimic Android build system for a small subset of source.

def expand(dir, files)
  files.map { |f| File.join(dir, f) }
end

# Compiles sources to *.o files.
# Returns array of output *.o filenames
def compile(sources, cflags, params = {})
  outputs = []
  for s in sources
    ext = File.extname(s)

    case ext
    when ".c"
      cc = "cc"
    when ".cpp", ".cc"
      cc = "cxx"
    else
      raise "Unknown extension #{ext}"
    end

    output = s + ".o"
    outputs << output
    order_deps = if params[:order_deps]
        " || " + params[:order_deps].join(" ")
      else
        ""
      end

    # TODO: try to build the tools with LLVM libc: -stdlib=libc++
    puts "build #{output}: #{cc} #{s}#{order_deps}\n    cflags = #{cflags}"
  end

  return outputs
end

# Generate proto and compile it
def protoc(source)
  basename = File.join(File.dirname(source), File.basename(source, ".proto"))
  cfile = basename + ".pb.cc"
  hfile = basename + ".pb.h"
  ofile = cfile + ".o"
  puts "build #{cfile} #{hfile}: protoc #{source}"
  puts "build #{ofile}: cxx #{cfile}\n    cflags = -I."

  return hfile, cfile, ofile
end

# dir - directory where ninja file is located
# lib - static library path relative to dir
def subninja(dir, lib)
  puts "subninja #{dir}build.ninja"
  return lib.each { |l| dir + l }
end

# Links object files
def link(output, objects, ldflags)
  # TODO: try to build the tools with LLVM libc: -stdlib=libc++
  puts "build #{output}: link #{objects.join(" ")}\n    ldflags = #{ldflags}"
end

def genheader(input, variable, output)
  puts "build #{output}: genheader #{input}\n    var = #{variable}"
end

puts "# This set of commands generated by generate_build.rb script\n\n"
puts "CC = #{ENV["CC"] || "clang"}"
puts "CXX = #{ENV["CXX"] || "clang++"}\n\n"
puts "CFLAGS = #{ENV["CFLAGS"]}"
puts "CPPFLAGS = #{ENV["CPPFLAGS"]}"
puts "CXXFLAGS = #{ENV["CXXFLAGS"]}"
puts "LDFLAGS = #{ENV["LDFLAGS"]}"
puts "PLATFORM_TOOLS_VERSION = #{ENV["PLATFORM_TOOLS_VERSION"]}\n\n"

puts "" "
rule cc
  command = $CC -std=gnu11 $CFLAGS $CPPFLAGS $cflags -c $in -o $out

rule cxx
  command = $CXX -std=gnu++2a $CXXFLAGS $CPPFLAGS $cflags -c $in -o $out

rule link
  command = $CXX $ldflags $LDFLAGS $in -o $out

rule protoc
  command = protoc --cpp_out=. $in

rule genheader
  command = (echo 'unsigned char $var[] = {' && xxd -i <$in && echo '};') > $out


" ""

key_type_h, key_type_c, key_type_o = protoc("system/core/adb/proto/key_type.proto")

libbuildversionfiles = %w(
  libbuildversion.cpp
)
libbuildversion = compile(expand("build/soong/cc/libbuildversion", libbuildversionfiles), "-Ibuild/soong/cc/libbuildversion/include")

adbdfiles = %w(
  adb.cpp
  adb_io.cpp
  adb_listeners.cpp
  adb_trace.cpp
  adb_utils.cpp
  fdevent/fdevent.cpp
  fdevent/fdevent_poll.cpp
  fdevent/fdevent_epoll.cpp
  shell_service_protocol.cpp
  sockets.cpp
  transport.cpp
  types.cpp
)
libadbd = compile(expand("system/core/adb", adbdfiles), '-DPLATFORM_TOOLS_VERSION="\"$PLATFORM_TOOLS_VERSION\"" -DADB_HOST=1 -Isystem/core/include -Isystem/libbase/include -Isystem/core/adb -Isystem/core/libcrypto_utils/include -Iexternal/boringssl/include -Isystem/core/diagnose_usb/include -Isystem/core/adb/crypto/include -Isystem/core/adb/proto -Isystem/core/adb/tls/include', :order_deps => [key_type_h])

apkent_h, apkent_c, apkent_o = protoc("system/core/adb/fastdeploy/proto/ApkEntry.proto")
app_processes_h, app_processes_c, app_processes_o = protoc("system/core/adb/proto/app_processes.proto")
adb_known_hosts_h, adb_known_hosts_c, adb_known_hosts_o = protoc("system/core/adb/proto/adb_known_hosts.proto")
pairing_h, pairing_c, pairing_o = protoc("system/core/adb/proto/pairing.proto")

deployagent_inc = "system/core/adb/client/deployagent.inc"
genheader("deployagent.jar", "kDeployAgent", deployagent_inc)

deployagentscript_inc = "system/core/adb/client/deployagentscript.inc"
genheader("system/core/adb/fastdeploy/deployagent/deployagent.sh", "kDeployAgentScript", deployagentscript_inc)

adbfiles = %w(
  client/adb_client.cpp
  client/adb_install.cpp
  client/adb_wifi.cpp
  client/auth.cpp
  client/bugreport.cpp
  client/commandline.cpp
  client/console.cpp
  client/fastdeploy.cpp
  client/fastdeploycallbacks.cpp
  client/file_sync_client.cpp
  client/incremental.cpp
  client/incremental_server.cpp
  client/incremental_utils.cpp
  client/line_printer.cpp
  client/main.cpp
  client/pairing/pairing_client.cpp
  client/transport_local.cpp
  client/transport_usb.cpp
  client/usb_dispatch.cpp
  client/usb_libusb.cpp
  client/usb_linux.cpp
  crypto/key.cpp
  crypto/rsa_2048_key.cpp
  crypto/x509_generator.cpp
  fastdeploy/deploypatchgenerator/apk_archive.cpp
  fastdeploy/deploypatchgenerator/deploy_patch_generator.cpp
  fastdeploy/deploypatchgenerator/patch_utils.cpp
  pairing_auth/aes_128_gcm.cpp
  pairing_auth/pairing_auth.cpp
  pairing_connection/pairing_connection.cpp
  services.cpp
  socket_spec.cpp
  sysdeps/errno.cpp
  sysdeps/posix/network.cpp
  sysdeps_unix.cpp
  tls/adb_ca_list.cpp
  tls/tls_connection.cpp
)
libadb = compile(expand("system/core/adb", adbfiles), "-D_GNU_SOURCE -DADB_HOST=1 -Isystem/core/include -Isystem/libbase/include -Isystem/core/adb -Isystem/core/libcrypto_utils/include -Iexternal/boringssl/include -Iframeworks/base/libs/androidfw/include -Iframeworks/native/include -Isystem/core/adb/crypto/include -Isystem/core/adb/proto -Isystem/core/adb/tls/include -Isystem/core/adb/pairing_connection/include -Isystem/libziparchive/include -Isystem/core/adb/pairing_auth/include",
    :order_deps => [apkent_h, key_type_h, app_processes_h, adb_known_hosts_h, pairing_h, deployagent_inc, deployagentscript_inc])
androidfwfiles = %w(
  ApkAssets.cpp
  Asset.cpp
  AssetDir.cpp
  AssetManager.cpp
  AssetManager2.cpp
  ChunkIterator.cpp
  ConfigDescription.cpp
  Idmap.cpp
  LoadedArsc.cpp
  Locale.cpp
  LocaleData.cpp
  ResourceTypes.cpp
  ResourceUtils.cpp
  StreamingZipInflater.cpp
  TypeWrappers.cpp
  Util.cpp
  ZipUtils.cpp
  ZipFileRO.cpp
  misc.cpp
)
libandroidfw = compile(expand("frameworks/base/libs/androidfw", androidfwfiles), "-Isystem/libbase/include -Iframeworks/base/libs/androidfw/include -Isystem/core/libutils/include -Isystem/core/liblog/include -Isystem/core/libsystem/include -Iframeworks/native/include -Isystem/core/libcutils/include -Isystem/libziparchive/include")

basefiles = %w(
  chrono_utils.cpp
  errors_unix.cpp
  file.cpp
  liblog_symbols.cpp
  logging.cpp
  mapped_file.cpp
  parsebool.cpp
  parsenetaddress.cpp
  stringprintf.cpp
  strings.cpp
  test_utils.cpp
  threads.cpp
)
libbase = compile(expand("system/libbase", basefiles), "-DADB_HOST=1 -Isystem/libbase/include -Isystem/core/include")

logfiles = %w(
  log_event_list.cpp
  log_event_write.cpp
  logger_name.cpp
  logger_write.cpp
  logprint.cpp
  properties.cpp
)
liblog = compile(expand("system/core/liblog", logfiles), "-DLIBLOG_LOG_TAG=1006 -D_XOPEN_SOURCE=700 -DFAKE_LOG_DEVICE=1 -Isystem/core/log/include -Isystem/core/include -Isystem/libbase/include")

cutilsfiles = %w(
  android_get_control_file.cpp
  canned_fs_config.cpp
  fs_config.cpp
  load_file.cpp
  socket_inaddr_any_server_unix.cpp
  socket_local_client_unix.cpp
  socket_local_server_unix.cpp
  socket_network_client_unix.cpp
  sockets.cpp
  sockets_unix.cpp
  threads.cpp
  trace-host.cpp
)
libcutils = compile(expand("system/core/libcutils", cutilsfiles), "-DPROP_NAME_MAX=32 -D_GNU_SOURCE -Isystem/core/libcutils/include -Isystem/core/include -Isystem/libbase/include")

diagnoseusbfiles = %w(
  diagnose_usb.cpp
)
libdiagnoseusb = compile(expand("system/core/diagnose_usb", diagnoseusbfiles), "-Isystem/core/include -Isystem/libbase/include -Isystem/core/diagnose_usb/include")

libcryptofiles = %w(
  android_pubkey.c
)
libcrypto = compile(expand("system/core/libcrypto_utils", libcryptofiles), "-Isystem/core/libcrypto_utils/include -Iexternal/boringssl/include")

# TODO: make subninja working
#boringssl = subninja('boringssl/src/build/', ['ssl/libssl.a'])
boringssl = ["external/boringssl/build/crypto/libcrypto.a", "external/boringssl/build/ssl/libssl.a"]
boringssl_ldflags = "-Wl,--whole-archive " + boringssl.join(" ") + " -Wl,--no-whole-archive"

fastbootfiles = %w(
  bootimg_utils.cpp
  fastboot.cpp
  fastboot_driver.cpp
  fs.cpp
  main.cpp
  socket.cpp
  tcp.cpp
  udp.cpp
  usb_linux.cpp
  util.cpp
)
libfastboot = compile(expand("system/core/fastboot", fastbootfiles), '-DPLATFORM_TOOLS_VERSION="\"$PLATFORM_TOOLS_VERSION\"" -D_GNU_SOURCE -D_XOPEN_SOURCE=700 -DUSE_F2FS -Isystem/libbase/include -Isystem/core/include -Isystem/core/adb -Isystem/core/libsparse/include -Isystem/tools/mkbootimg/include/bootimg -Isystem/extras/ext4_utils/include -Isystem/extras/f2fs_utils -Isystem/libziparchive/include -Isystem/core/fs_mgr/liblp/include -Isystem/core/diagnose_usb/include -Iexternal/avb -Ibuild/soong/cc/libbuildversion/include -Idevelopment/sdk')

fsmgrfiles = %w(
  liblp/images.cpp
  liblp/partition_opener.cpp
  liblp/reader.cpp
  liblp/utility.cpp
  liblp/writer.cpp
)
libfsmgr = compile(expand("system/core/fs_mgr", fsmgrfiles), "-Isystem/core/fs_mgr/liblp/include -Isystem/libbase/include -Isystem/extras/ext4_utils/include -Isystem/core/libsparse/include")

sparsefiles = %w(
  backed_block.cpp
  output_file.cpp
  sparse.cpp
  sparse_crc32.cpp
  sparse_err.cpp
  sparse_read.cpp
)
libsparse = compile(expand("system/core/libsparse", sparsefiles), "-Isystem/core/libsparse/include -Isystem/libbase/include")

f2fsfiles = %w(
)
f2fs = compile(expand("system/extras/f2fs_utils", f2fsfiles), "-DHAVE_LINUX_TYPES_H -Iexternal/f2fs-tools/include -Isystem/core/liblog/include")

zipfiles = %w(
  zip_archive.cc
  zip_error.cpp
  zip_cd_entry_map.cc
  zip_archive_stream_entry.cc
  zip_writer.cc
)
# we use -std=c++17 as this lib currently does not compile with c++20 standard due to
# https://stackoverflow.com/questions/37618213/when-is-a-private-constructor-not-a-private-constructor/57430419#57430419
libzip = compile(expand("system/libziparchive", zipfiles), "-std=c++17 -Isystem/libbase/include -Isystem/core/include -Isystem/libziparchive/include")

utilfiles = %w(
  FileMap.cpp
  JenkinsHash.cpp
  RefBase.cpp
  SharedBuffer.cpp
  String16.cpp
  String8.cpp
  StrongPointer.cpp
  VectorImpl.cpp
  Unicode.cpp
)
libutil = compile(expand("system/core/libutils", utilfiles), "-Isystem/core/include -Isystem/libbase/include")

ext4files = %w(
  ext4_utils.cpp
  wipe.cpp
  ext4_sb.cpp
)
libext4 = compile(expand("system/extras/ext4_utils", ext4files), "-D_GNU_SOURCE -Isystem/core/libsparse/include -Isystem/core/include -Isystem/extras/ext4_utils/include -Isystem/libbase/include")

link("fastboot", libfsmgr + libsparse + libzip + libcutils + liblog + libutil + libbase + libext4 + f2fs + libfastboot + libdiagnoseusb + libbuildversion, boringssl_ldflags + " -lz -lpcre2-8 -lpthread -lselinux -lsepol")

# mke2fs.android - a ustom version of mke2fs that supports --android_sparse (FS#56955)
libext2fsfiles = %w(
  lib/blkid/cache.c
  lib/blkid/dev.c
  lib/blkid/devname.c
  lib/blkid/devno.c
  lib/blkid/getsize.c
  lib/blkid/llseek.c
  lib/blkid/probe.c
  lib/blkid/read.c
  lib/blkid/resolve.c
  lib/blkid/save.c
  lib/blkid/tag.c
  lib/e2p/encoding.c
  lib/e2p/feature.c
  lib/e2p/hashstr.c
  lib/e2p/mntopts.c
  lib/e2p/ostype.c
  lib/e2p/parse_num.c
  lib/e2p/uuid.c
  lib/et/com_err.c
  lib/et/error_message.c
  lib/et/et_name.c
  lib/ext2fs/alloc.c
  lib/ext2fs/alloc_sb.c
  lib/ext2fs/alloc_stats.c
  lib/ext2fs/alloc_tables.c
  lib/ext2fs/atexit.c
  lib/ext2fs/badblocks.c
  lib/ext2fs/bb_inode.c
  lib/ext2fs/bitmaps.c
  lib/ext2fs/bitops.c
  lib/ext2fs/blkmap64_ba.c
  lib/ext2fs/blkmap64_rb.c
  lib/ext2fs/blknum.c
  lib/ext2fs/block.c
  lib/ext2fs/bmap.c
  lib/ext2fs/closefs.c
  lib/ext2fs/crc16.c
  lib/ext2fs/crc32c.c
  lib/ext2fs/csum.c
  lib/ext2fs/dirblock.c
  lib/ext2fs/dir_iterate.c
  lib/ext2fs/expanddir.c
  lib/ext2fs/ext2_err.c
  lib/ext2fs/ext_attr.c
  lib/ext2fs/extent.c
  lib/ext2fs/fallocate.c
  lib/ext2fs/fileio.c
  lib/ext2fs/freefs.c
  lib/ext2fs/gen_bitmap64.c
  lib/ext2fs/gen_bitmap.c
  lib/ext2fs/get_num_dirs.c
  lib/ext2fs/getsectsize.c
  lib/ext2fs/getsize.c
  lib/ext2fs/hashmap.c
  lib/ext2fs/i_block.c
  lib/ext2fs/ind_block.c
  lib/ext2fs/initialize.c
  lib/ext2fs/inline.c
  lib/ext2fs/inline_data.c
  lib/ext2fs/inode.c
  lib/ext2fs/io_manager.c
  lib/ext2fs/ismounted.c
  lib/ext2fs/link.c
  lib/ext2fs/llseek.c
  lib/ext2fs/lookup.c
  lib/ext2fs/mkdir.c
  lib/ext2fs/mkjournal.c
  lib/ext2fs/mmp.c
  lib/ext2fs/namei.c
  lib/ext2fs/newdir.c
  lib/ext2fs/nls_utf8.c
  lib/ext2fs/openfs.c
  lib/ext2fs/progress.c
  lib/ext2fs/punch.c
  lib/ext2fs/rbtree.c
  lib/ext2fs/read_bb.c
  lib/ext2fs/read_bb_file.c
  lib/ext2fs/res_gdt.c
  lib/ext2fs/rw_bitmaps.c
  lib/ext2fs/sha512.c
  lib/ext2fs/sparse_io.c
  lib/ext2fs/symlink.c
  lib/ext2fs/undo_io.c
  lib/ext2fs/unix_io.c
  lib/ext2fs/valid_blk.c
  lib/support/dict.c
  lib/support/mkquota.c
  lib/support/parse_qtype.c
  lib/support/plausible.c
  lib/support/prof_err.c
  lib/support/profile.c
  lib/support/quotaio.c
  lib/support/quotaio_tree.c
  lib/support/quotaio_v2.c
  lib/uuid/clear.c
  lib/uuid/gen_uuid.c
  lib/uuid/isnull.c
  lib/uuid/pack.c
  lib/uuid/parse.c
  lib/uuid/unpack.c
  lib/uuid/unparse.c
  misc/create_inode.c
)
libext2fs = compile(expand("external/e2fsprogs", libext2fsfiles), "-Iexternal/e2fsprogs/lib -Iexternal/e2fsprogs/lib/ext2fs -Isystem/core/libsparse/include")

mke2fsfiles = %w(
  misc/default_profile.c
  misc/mke2fs.c
  misc/mk_hugefiles.c
  misc/util.c
)
mke2fs = compile(expand("external/e2fsprogs", mke2fsfiles), "-Iexternal/e2fsprogs/lib")

link("mke2fs.android", mke2fs + libext2fs + libsparse + libbase + libzip + liblog + libutil, "-lpthread -lz")

e2fsdroidfiles = %w(
  contrib/android/basefs_allocator.c
  contrib/android/base_fs.c
  contrib/android/block_list.c
  contrib/android/block_range.c
  contrib/android/e2fsdroid.c
  contrib/android/fsmap.c
  contrib/android/perms.c
)
e2fsdroid = compile(expand("external/e2fsprogs", e2fsdroidfiles), "-Iexternal/e2fsprogs/lib -Iexternal/e2fsprogs/lib/ext2fs -Isystem/core/libcutils/include -Iexternal/e2fsprogs/misc")

link("e2fsdroid", e2fsdroid + libext2fs + libsparse + libbase + libzip + liblog + libutil + libcutils, "-lz -lpthread -lpcre2-8 -lselinux -lsepol")

ext2simgfiles = %w(
  contrib/android/ext2simg.c
)
ext2simg = compile(expand("external/e2fsprogs", ext2simgfiles), "-Iexternal/e2fsprogs/lib -Isystem/core/libsparse/include")

link("ext2simg", ext2simg + libext2fs + libsparse + libbase + libzip + liblog + libutil, "-lz -lpthread")

link("adb", libbase + liblog + libcutils + libutil + libadbd + libadb + libdiagnoseusb + libcrypto + libandroidfw + libzip + [apkent_o, key_type_o, app_processes_o, adb_known_hosts_o, pairing_o], boringssl_ldflags + " -lpthread -lusb-1.0 -lprotobuf -lz -llz4 -lbrotlidec -lbrotlienc")

#etc1toolfiles = %w(
#  etc1tool.cpp
#)
#etc1tool = compile(expand("development/tools/etc1tool", etc1toolfiles), "-Iframeworks/native/opengl/include")
#link("etc1tool", etc1tool, "-lpng")

hprofconvfiles = %w(
  HprofConv.c
)
hprofconv = compile(expand("dalvik/tools/hprof-conv", hprofconvfiles), "")
link("hprof-conv", hprofconv, "");

libaapt2_resources_h, libaapt2_resources_c, libaapt2_resources_o = protoc("frameworks/base/tools/aapt2/Resources.proto")
libaapt2_configuration_h, libaapt2_configuration_c, libaapt2_configuration_o = protoc("frameworks/base/tools/aapt2/Configuration.proto")
libaapt2_resourcesinternal_h, libaapt2_resourcesinternal_c, libaapt2_resourcesinternal_o = protoc("frameworks/base/tools/aapt2/ResourcesInternal.proto")

libaapt2files = %w(
  compile/IdAssigner.cpp
  compile/InlineXmlFormatParser.cpp
  compile/NinePatch.cpp
  compile/Png.cpp
  compile/PngChunkFilter.cpp
  compile/PngCrunch.cpp
  compile/PseudolocaleGenerator.cpp
  compile/Pseudolocalizer.cpp
  compile/XmlIdCollector.cpp
  configuration/ConfigurationParser.cpp
  dump/DumpManifest.cpp
  filter/AbiFilter.cpp
  filter/ConfigFilter.cpp
  format/Archive.cpp
  format/Container.cpp
  format/binary/BinaryResourceParser.cpp
  format/binary/ResChunkPullParser.cpp
  format/binary/TableFlattener.cpp
  format/binary/XmlFlattener.cpp
  format/proto/ProtoDeserialize.cpp
  format/proto/ProtoSerialize.cpp
  io/BigBufferStream.cpp
  io/File.cpp
  io/FileStream.cpp
  io/FileSystem.cpp
  io/StringStream.cpp
  io/Util.cpp
  io/ZipArchive.cpp
  link/AutoVersioner.cpp
  link/ManifestFixer.cpp
  link/NoDefaultResourceRemover.cpp
  link/ProductFilter.cpp
  link/PrivateAttributeMover.cpp
  link/ReferenceLinker.cpp
  link/ResourceExcluder.cpp
  link/TableMerger.cpp
  link/XmlCompatVersioner.cpp
  link/XmlNamespaceRemover.cpp
  link/XmlReferenceLinker.cpp
  optimize/MultiApkGenerator.cpp
  optimize/ResourceDeduper.cpp
  optimize/ResourceFilter.cpp
  optimize/ResourcePathShortener.cpp
  optimize/VersionCollapser.cpp
  process/SymbolTable.cpp
  split/TableSplitter.cpp
  text/Printer.cpp
  text/Unicode.cpp
  text/Utf8Iterator.cpp
  util/BigBuffer.cpp
  util/Files.cpp
  util/Util.cpp
  Debug.cpp
  DominatorTree.cpp
  java/AnnotationProcessor.cpp
  java/ClassDefinition.cpp
  java/JavaClassGenerator.cpp
  java/ManifestClassGenerator.cpp
  java/ProguardRules.cpp
  LoadedApk.cpp
  Resource.cpp
  ResourceParser.cpp
  ResourceTable.cpp
  ResourceUtils.cpp
  ResourceValues.cpp
  SdkConstants.cpp
  StringPool.cpp
  trace/TraceBuffer.cpp
  xml/XmlActionExecutor.cpp
  xml/XmlDom.cpp
  xml/XmlPullParser.cpp
  xml/XmlUtil.cpp
)
libaapt2 = compile(expand("frameworks/base/tools/aapt2", libaapt2files), "-I. -Iframeworks/base/tools/aapt2 -Isystem/libbase/include -Isystem/core/include -Isystem/libziparchive/include -Iframeworks/base/libs/androidfw/include -Iframeworks/native/include -Isystem/core/libcutils/include -Ibuild/soong/cc/libbuildversion/include", :order_deps => [libaapt2_resources_h, libaapt2_configuration_h, libaapt2_resourcesinternal_h])

aapt2files = %w(
  cmd/Command.cpp
  cmd/Compile.cpp
  cmd/Convert.cpp
  cmd/Diff.cpp
  cmd/Dump.cpp
  cmd/Link.cpp
  cmd/Optimize.cpp
  cmd/Util.cpp
  Main.cpp
)
aapt2 = compile(expand("frameworks/base/tools/aapt2", aapt2files), "-I. -Iframeworks/base/tools/aapt2 -Iframeworks/base/libs/androidfw/include -Isystem/core/libutils/include -Isystem/libbase/include -Isystem/core/liblog/include -Isystem/core/include -Iframeworks/native/include -Isystem/libziparchive/include")

link("aapt2", aapt2 + libaapt2 + libandroidfw + liblog + libcutils + libutil + libbase + libzip + libbuildversion + [libaapt2_resources_o, libaapt2_configuration_o, libaapt2_resourcesinternal_o], "-lz -lprotobuf -lpthread -lexpat -lpng")

